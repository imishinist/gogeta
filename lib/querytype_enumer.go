// Code generated by "enumer -type=QueryType -json"; DO NOT EDIT.

package gogeta

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _QueryTypeName = "QueryExecute"

var _QueryTypeIndex = [...]uint8{0, 5, 12}

const _QueryTypeLowerName = "queryexecute"

func (i QueryType) String() string {
	if i < 0 || i >= QueryType(len(_QueryTypeIndex)-1) {
		return fmt.Sprintf("QueryType(%d)", i)
	}
	return _QueryTypeName[_QueryTypeIndex[i]:_QueryTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _QueryTypeNoOp() {
	var x [1]struct{}
	_ = x[Query-(0)]
	_ = x[Execute-(1)]
}

var _QueryTypeValues = []QueryType{Query, Execute}

var _QueryTypeNameToValueMap = map[string]QueryType{
	_QueryTypeName[0:5]:       Query,
	_QueryTypeLowerName[0:5]:  Query,
	_QueryTypeName[5:12]:      Execute,
	_QueryTypeLowerName[5:12]: Execute,
}

var _QueryTypeNames = []string{
	_QueryTypeName[0:5],
	_QueryTypeName[5:12],
}

// QueryTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func QueryTypeString(s string) (QueryType, error) {
	if val, ok := _QueryTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _QueryTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to QueryType values", s)
}

// QueryTypeValues returns all values of the enum
func QueryTypeValues() []QueryType {
	return _QueryTypeValues
}

// QueryTypeStrings returns a slice of all String values of the enum
func QueryTypeStrings() []string {
	strs := make([]string, len(_QueryTypeNames))
	copy(strs, _QueryTypeNames)
	return strs
}

// IsAQueryType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i QueryType) IsAQueryType() bool {
	for _, v := range _QueryTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for QueryType
func (i QueryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for QueryType
func (i *QueryType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("QueryType should be a string, got %s", data)
	}

	var err error
	*i, err = QueryTypeString(s)
	return err
}
